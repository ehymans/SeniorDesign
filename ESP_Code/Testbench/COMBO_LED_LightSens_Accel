#include "ICM42670P.h"
#include "Adafruit_VEML7700.h"
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include "BluetoothSerial.h"
#include "esp_task_wdt.h"
#include <Sparkfun_DRV2605L.h>
#include <Wire.h>

#define LEFT_TOUCH_PIN 27     // GPIO for the left touch sensor
#define RIGHT_TOUCH_PIN 4     // GPIO for the right touch sensor
#define HEADLIGHT_PIN 32
#define TAILLIGHT_PIN 13
#define LEFT_BLINKER 33
#define RIGHT_BLINKER 16
#define TCA9548A_ADDRESS 0x70  // Address of the TCA9548A mux

SFE_HMD_DRV2605L HMD1;  // Haptic motor 1
SFE_HMD_DRV2605L HMD2;  // Haptic motor 2

bool isHeadlightOn = true; // Track the headlight status

// Flash state variables for blinkers
volatile bool leftFlash = false;
volatile bool rightFlash = false;

// Collision state variables
bool inCollision = false;
unsigned long collisionBlinkEndTime = 0;

// Last time touch sensors were triggered (for debouncing)
volatile unsigned long lastLeftInterruptTime = 0;
volatile unsigned long lastRightInterruptTime = 0;
volatile int leftTouchCount = 0;       // Counter for left touch sensor
volatile int rightTouchCount = 0;      // Counter for right touch sensor
unsigned long lastLeftTouchTime = 0;   // Last activation time for debounce
unsigned long lastRightTouchTime = 0;  // Last activation time for debounce
const unsigned long debounceDelay = 600;  // 600ms debounce delay

bool deccel = false;

// PWM settings for the tail light
const int pwmFrequency = 5000; // PWM frequency
const int pwmResolution = 8;   // 8-bit resolution (0-255 for duty cycle)

// Variables to store acceleration data
float accelX = 0, accelY = 0, accelZ = 0;
float prevAccelMagnitude = 0;  // To store the previous magnitude of acceleration

// Instantiate an ICM42670 with LSB address set to 0
ICM42670 IMU(Wire, 0);
Adafruit_VEML7700 veml = Adafruit_VEML7700();

void setup() {
  // Initialize Serial for debugging
  Serial.begin(115200);
   // Initialize I2C for Haptic
  Wire.begin();  // Initialize I2C communication
  while (!Serial) { delay(10); }

  // Initialize ICM42670
  int ret = IMU.begin();
  if (ret != 0) {
    Serial.print("ICM42670 initialization failed: ");
    Serial.println(ret);
    while (1);
  }
  // Configure IMU
  IMU.startAccel(100, 16);  // Accel ODR = 100 Hz, Full Scale Range = 16G
  IMU.startGyro(100, 2000); // Gyro ODR = 100 Hz, Full Scale Range = 2000 dps
  delay(100); // Allow IMU to start

  // Initialize VEML7700
  Serial.println("Adafruit VEML7700 Test");
  if (!veml.begin()) {
    Serial.println("VEML7700 sensor not found");
    while (1);
  }
  Serial.println("VEML7700 sensor found");

  // Print VEML7700 gain and integration time
  Serial.print(F("Gain: "));
  switch (veml.getGain()) {
    case VEML7700_GAIN_1: Serial.println("1"); break;
    case VEML7700_GAIN_2: Serial.println("2"); break;
    case VEML7700_GAIN_1_4: Serial.println("1/4"); break;
    case VEML7700_GAIN_1_8: Serial.println("1/8"); break;
  }

  Serial.print(F("Integration Time (ms): "));
  switch (veml.getIntegrationTime()) {
    case VEML7700_IT_25MS: Serial.println("25"); break;
    case VEML7700_IT_50MS: Serial.println("50"); break;
    case VEML7700_IT_100MS: Serial.println("100"); break;
    case VEML7700_IT_200MS: Serial.println("200"); break;
    case VEML7700_IT_400MS: Serial.println("400"); break;
    case VEML7700_IT_800MS: Serial.println("800"); break;
  }

  veml.setLowThreshold(10000);
  veml.setHighThreshold(20000);
  veml.interruptEnable(true);

 // Initialize Haptic Motor 1
  tcaSelect(0);  // Select mux channel 0
  if (!HMD1.begin()) {
    Serial.println("Failed to initialize DRV2605L on channel 0");
    while (1);
  }
  HMD1.Mode(0);  // Internal trigger mode
  HMD1.MotorSelect(0x36);  // ERM motor selected
  HMD1.Library(1);  // Use library 1 (for ERM motors)
  Serial.println("Haptic motor 1 initialized on channel 0");

  // Initialize Haptic Motor 2
  tcaSelect(1);  // Select mux channel 1
  if (!HMD2.begin()) {
    Serial.println("Failed to initialize DRV2605L on channel 1");
    while (1);
  }
  HMD2.Mode(0);  // Internal trigger mode
  HMD2.MotorSelect(0x36);  // ERM motor selected
  HMD2.Library(1);  // Use library 1 (for ERM motors)
  Serial.println("Haptic motor 2 initialized on channel 1");

  // Initialize the LED pin for the headlight as output
  pinMode(HEADLIGHT_PIN, OUTPUT);
  pinMode(LEFT_BLINKER, OUTPUT);
  pinMode(RIGHT_BLINKER, OUTPUT);
  pinMode(TAILLIGHT_PIN, OUTPUT);
  pinMode(LEFT_TOUCH_PIN, INPUT);
  pinMode(RIGHT_TOUCH_PIN, INPUT);
  digitalWrite(HEADLIGHT_PIN, LOW); // Ensure the headlight is off initially
  digitalWrite(TAILLIGHT_PIN, LOW);
  digitalWrite(LEFT_BLINKER, LOW);
  digitalWrite(RIGHT_BLINKER, LOW);
  // Initialize PWM for the tail light (kept as in your original code)
  digitalWrite(TAILLIGHT_PIN, LOW);  // Use new API to attach pin and set frequency/resolution

  // Create FreeRTOS tasks
  xTaskCreatePinnedToCore(vemlTask, "VEML7700 Task", 4096, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(imuTask, "IMU Task", 4096, NULL, 1, NULL, 1);
  //xTaskCreatePinnedToCore(handleBlinkers, "BlinkerTask", 2048, NULL, 1, NULL, 1);
}

void vemlTask(void *parameter) {
  while (true) {
    // Read the ambient light from the VEML7700 sensor
    float lux = veml.readLux();
    Serial.print("Ambient Light (lux): ");
    Serial.println(lux);

    // Set a threshold for low light to turn on the headlight and tail light
    if (lux < 90.0 && isHeadlightOn) {
      // Adjust threshold as needed and check Bluetooth override
      digitalWrite(HEADLIGHT_PIN, HIGH);  // Turn on headlight
      digitalWrite(TAILLIGHT_PIN, HIGH);  // 50% brightness for tail light
      Serial.println("Headlight ON and tail light at 50% brightness");
    } else {
      digitalWrite(HEADLIGHT_PIN, LOW);  // Turn off headlight
      digitalWrite(TAILLIGHT_PIN, LOW);  // Turn off tail light
      Serial.println("Headlight and tail light OFF");
    }

    vTaskDelay(1000 / portTICK_PERIOD_MS);  // Check every 1 second
  }
}

// Threshold for collision detection (adjust as needed)
const float collisionThreshold = 3000.0; // Adjust thresholds in all directions

const float decelThreshold = 500.0; // Adjust when testing

void imuTask(void *parameter) {
  while (true) {
    inv_imu_sensor_event_t imu_event;
    IMU.getDataFromRegisters(imu_event);

   // Calculate the delta for each axis
    float deltaX = abs(imu_event.accel[0] - accelX);
    float deltaY = abs(imu_event.accel[1] - accelY);
    float deltaZ = abs(imu_event.accel[2] - accelZ);

    // Update previous acceleration values
    accelX = imu_event.accel[0];
    accelY = imu_event.accel[1];
    accelZ = imu_event.accel[2];

    // Print the current acceleration values and the deltas
    Serial.print("Accel X: "); Serial.print(imu_event.accel[0]);
    Serial.print(", Delta X: "); Serial.println(deltaX);

    Serial.print("Accel Y: "); Serial.print(imu_event.accel[1]);
    Serial.print(", Delta Y: "); Serial.println(deltaY);

    Serial.print("Accel Z: "); Serial.print(imu_event.accel[2]);
    Serial.print(", Delta Z: "); Serial.println(deltaZ);

    // Check if any delta exceeds the collision threshold
    if (deltaX > collisionThreshold || deltaY > collisionThreshold || deltaZ > collisionThreshold) {
      Serial.println("Collision detected!");
     // SerialBT.println("69");
      inCollision = true;
      if (inCollision) {
        for(int i = 0; i<4;i++){
        // Blink all lights in hazard mode for collision indication
        digitalWrite(LEFT_BLINKER, HIGH);
        digitalWrite(RIGHT_BLINKER, HIGH);
        digitalWrite(HEADLIGHT_PIN, HIGH);
        ledcWrite(TAILLIGHT_PIN, 255); // Full brightness for tail light
        vTaskDelay(300 / portTICK_PERIOD_MS);
        digitalWrite(LEFT_BLINKER, LOW);
        digitalWrite(RIGHT_BLINKER, LOW);
        digitalWrite(HEADLIGHT_PIN, LOW);
        ledcWrite(TAILLIGHT_PIN, 0);
        vTaskDelay(300 / portTICK_PERIOD_MS);
        }
        
      }
    } else if (deltaX > decelThreshold || deltaY > decelThreshold) {
      Serial.println("Slow down detected!");
      for(int i=0;i<4;i++){
      // Blink brake light
      ledcWrite(TAILLIGHT_PIN, 255); // Full brightness for tail light
      vTaskDelay(300 / portTICK_PERIOD_MS);

      ledcWrite(TAILLIGHT_PIN, 0);
      vTaskDelay(300 / portTICK_PERIOD_MS);
      }

    } else {
      inCollision = false;
    }

    vTaskDelay(100 / portTICK_PERIOD_MS);  // Adjust delay as needed
  }
}

// Task to handle blinker logic and debounce
/*void handleBlinkers(void *param) {
  while (true) {
    unsigned long currentTime = millis();

    // If leftFlash is true, blink the left LED
    if (leftFlash) {
      if (currentTime - lastLeftInterruptTime > debounceDelay) {
        Serial.println("Left blinker ON");
        blinkLeftLED();
      }
    }

    // If rightFlash is true, blink the right LED
    if (rightFlash) {
      if (currentTime - lastRightInterruptTime > debounceDelay) {
        Serial.println("Right blinker ON");
        blinkRightLED();
      }
    }

    vTaskDelay(100 / portTICK_PERIOD_MS);  // Task delay to prevent rapid toggling
  }
}*/

// Interrupt Service Routine (ISR) for the left touch sensor
void IRAM_ATTR leftTouchISR() {
  unsigned long currentTime = millis();
  if (currentTime - lastLeftTouchTime > debounceDelay) {  // Debounce check
    leftTouchCount++;  // Increment the left touch counter
    blinkLeftLED();
    lastLeftTouchTime = currentTime;
    Serial.print("Left touch detected! Count: ");
    Serial.println(leftTouchCount);
  }
}

// Interrupt Service Routine (ISR) for the right touch sensor
void IRAM_ATTR rightTouchISR() {
  unsigned long currentTime = millis();
  if (currentTime - lastRightTouchTime > debounceDelay) {  // Debounce check
    blinkRightLED();
    rightTouchCount++;  // Increment the right touch counter
    lastRightTouchTime = currentTime;
    Serial.print("Right touch detected! Count: ");
    Serial.println(rightTouchCount);
  }
}
// Function to blink the left LED and trigger haptic motor 1
void blinkLeftLED() {
  digitalWrite(LEFT_BLINKER, HIGH);
  tcaSelect(0);  // Select mux channel 0
  HMD1.Waveform(0, 1);  // Play effect #1
  HMD1.go();  // Trigger the haptic motor
  vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for blinking
  digitalWrite(LEFT_BLINKER, LOW);
  vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for blinking
}

// Function to blink the right LED and trigger haptic motor 2
void blinkRightLED() {
  digitalWrite(RIGHT_BLINKER, HIGH);
  tcaSelect(1);  // Select mux channel 1
  HMD2.Waveform(0, 1);  // Play effect #1
  HMD2.go();  // Trigger the haptic motor
  vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for blinking
  digitalWrite(RIGHT_BLINKER, LOW);
  vTaskDelay(200 / portTICK_PERIOD_MS);  // Delay for blinking
}

// Function to select the mux channel
void tcaSelect(uint8_t channel) {
  if (channel > 7) return;
  Wire.beginTransmission(TCA9548A_ADDRESS);
  Wire.write(1 << channel);
  Wire.endTransmission();
}

void loop() {
  // Empty loop as FreeRTOS tasks handle the execution
}
