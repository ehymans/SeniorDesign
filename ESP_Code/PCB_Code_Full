#include <Wire.h>
#include <Adafruit_VEML7700.h>
#include "ICM42670P.h"
#include <Adafruit_Sensor.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include "BluetoothSerial.h"
#include <Sparkfun_DRV2605L.h>

#define TCA9548A_ADDRESS 0x70  // Address of the TCA9548A mux

// Instantiate an ICM42670 with LSB address set to 0
ICM42670 IMU(Wire, 0);

BluetoothSerial SerialBT;
SFE_HMD_DRV2605L HMD1;  // Haptic motor 1
SFE_HMD_DRV2605L HMD2;  // Haptic motor 2

bool isHeadlightOn = true;  // Track the headlight status

// Define pins for touch sensors and LEDs (blinkers)
const int leftTouchPin = 27;   // Left touch sensor
const int rightTouchPin = 4;   // Right touch sensor
const int leftLedPin = 33;     // Left blinker LED
const int rightLedPin = 16;    // Right blinker LED

// Define pins for the headlight and tail light
const int headlightPin = 32;   // LED headlight
const int taillightPin = 13;   // LED tail light
const int brakeLightPin = 13;  // Brake light (same as tail light for simplicity)

// Flash state variables for blinkers
volatile bool leftFlash = false;
volatile bool rightFlash = false;

// Debounce delay for touch sensors
const unsigned long debounceDelay = 600;  // 600ms debounce delay

// Collision state variables
bool inCollision = false;

bool deccel = false;

// Initialize VEML7700 object for the light sensor
Adafruit_VEML7700 veml = Adafruit_VEML7700();

// Variables to store acceleration data
float accelX = 0, accelY = 0, accelZ = 0;

// Function declarations
void handleBlinkers(void *param);
void IRAM_ATTR leftTouchISR();
void IRAM_ATTR rightTouchISR();
void handleHeadlightAndTailLight(void *param);
void handleCollisionDetection(void *param);
void handleBluetooth(void *param);
void tcaSelect(uint8_t channel);  // Function to select the mux channel

// FreeRTOS Task Handles
TaskHandle_t blinkerTaskHandle;
TaskHandle_t headlightTaskHandle;
TaskHandle_t collisionTaskHandle;

// I2C Mutex
SemaphoreHandle_t i2cMutex;

// Thresholds for collision detection (adjust as needed)
const float collisionThreshold = 2600.0;  // Adjust thresholds in all directions
const float decelThreshold = 900.0;       // Adjust when testing

// Setup function
void setup() {
  Serial.begin(115200);
  Serial.println("Initializing...");

  // Initialize Bluetooth
  SerialBT.begin("HelmetIQ");  // Name for the Bluetooth device
  Serial.println("Bluetooth Started! Waiting for connection...");

  // Initialize the LED pins for blinkers as output
  pinMode(leftLedPin, OUTPUT);
  digitalWrite(leftLedPin, LOW);
  pinMode(rightLedPin, OUTPUT);
  digitalWrite(rightLedPin, LOW);

  // Initialize the LED pins for the headlight and tail light as output
  pinMode(headlightPin, OUTPUT);
  digitalWrite(headlightPin, LOW);
  pinMode(taillightPin, OUTPUT);
  digitalWrite(taillightPin, LOW);

  // Configure touch sensor pins with internal pull-up resistors
  pinMode(leftTouchPin, INPUT_PULLUP);
  pinMode(rightTouchPin, INPUT_PULLUP);

  // Ensure touch sensor pins are in a known state
  delay(100);  // Allow time for pins to stabilize

  // Clear any pending interrupts
  detachInterrupt(digitalPinToInterrupt(leftTouchPin));
  detachInterrupt(digitalPinToInterrupt(rightTouchPin));

  // Initialize I2C communication
  Wire.begin();

  // Create I2C mutex
  i2cMutex = xSemaphoreCreateMutex();
  if (i2cMutex == NULL) {
    Serial.println("Failed to create I2C mutex");
    while (1)
      ;
  }

  // Initialize Haptic Motor 1
  if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
    tcaSelect(0);  // Select mux channel 0
    if (!HMD1.begin()) {
      Serial.println("Failed to initialize DRV2605L on channel 0");
      while (1)
        ;
    }
    HMD1.Mode(0);            // Internal trigger mode
    HMD1.MotorSelect(0x36);  // ERM motor selected
    HMD1.Library(1);         // Use library 1 (for ERM motors)
    xSemaphoreGive(i2cMutex);
  }
  Serial.println("Haptic motor 1 initialized on channel 0");

  // Initialize Haptic Motor 2
  if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
    tcaSelect(1);  // Select mux channel 1
    if (!HMD2.begin()) {
      Serial.println("Failed to initialize DRV2605L on channel 1");
      while (1)
        ;
    }
    HMD2.Mode(0);            // Internal trigger mode
    HMD2.MotorSelect(0x36);  // ERM motor selected
    HMD2.Library(1);         // Use library 1 (for ERM motors)
    xSemaphoreGive(i2cMutex);
  }
  Serial.println("Haptic motor 2 initialized on channel 1");

  // Initialize VEML7700 sensor
  if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
    if (!veml.begin()) {
      Serial.println("VEML7700 not found");
      while (1)
        ;
    }
    veml.setGain(VEML7700_GAIN_1);
    veml.setIntegrationTime(VEML7700_IT_100MS);
    veml.powerSaveEnable(true);
    xSemaphoreGive(i2cMutex);
  }

  // Initialize IMU
  int ret;
  if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
    ret = IMU.begin();
    xSemaphoreGive(i2cMutex);
  }
  if (ret != 0) {
    Serial.print("ICM42670 initialization failed: ");
    Serial.println(ret);
    while (1)
      ;
  }
  // Accel ODR = 100 Hz and Full Scale Range = 16G
  if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
    IMU.startAccel(100, 16);
    // Gyro ODR = 100 Hz and Full Scale Range = 2000 dps
    IMU.startGyro(100, 2000);
    xSemaphoreGive(i2cMutex);
  }
  // Wait for IMU to start
  delay(100);

  // Initialize blinker state variables
  leftFlash = false;
  rightFlash = false;

  // Attach hardware interrupts for touch sensors
  attachInterrupt(digitalPinToInterrupt(leftTouchPin), leftTouchISR, FALLING);
  attachInterrupt(digitalPinToInterrupt(rightTouchPin), rightTouchISR, FALLING);

  // Create FreeRTOS tasks
  xTaskCreatePinnedToCore(handleBlinkers, "BlinkerTask", 4096, NULL, 1, &blinkerTaskHandle, 0);
  xTaskCreatePinnedToCore(handleHeadlightAndTailLight, "HeadlightTask", 4096, NULL, 1, &headlightTaskHandle, 0);
  xTaskCreatePinnedToCore(handleCollisionDetection, "CollisionTask", 4096, NULL, 1, &collisionTaskHandle, 0);
  xTaskCreatePinnedToCore(handleBluetooth, "BluetoothTask", 4096, NULL, 1, NULL, 0);

  Serial.println("System initialized.");
}

void loop() {
  // The logic is now handled within FreeRTOS tasks
}

// Function to select the mux channel
void tcaSelect(uint8_t channel) {
  if (channel > 7)
    return;
  Wire.beginTransmission(TCA9548A_ADDRESS);
  Wire.write(1 << channel);
  Wire.endTransmission();
}

// ISR for left touch sensor with refined debounce logic
void IRAM_ATTR leftTouchISR() {
  static unsigned long lastInterruptTime = 0;
  unsigned long currentTime = xTaskGetTickCountFromISR() * portTICK_PERIOD_MS;

  // Check if debounce delay has passed and pin is actually LOW
  if ((currentTime - lastInterruptTime > debounceDelay) && (digitalRead(leftTouchPin) == LOW)) {
    leftFlash = !leftFlash;  // Toggle left blinker flag
    lastInterruptTime = currentTime;  // Update debounce time
  }
}

// ISR for right touch sensor with refined debounce logic
void IRAM_ATTR rightTouchISR() {
  static unsigned long lastInterruptTime = 0;
  unsigned long currentTime = xTaskGetTickCountFromISR() * portTICK_PERIOD_MS;

  // Check if debounce delay has passed and pin is actually LOW
  if ((currentTime - lastInterruptTime > debounceDelay) && (digitalRead(rightTouchPin) == LOW)) {
    rightFlash = !rightFlash;  // Toggle right blinker flag
    lastInterruptTime = currentTime;  // Update debounce time
  }
}

// Task to handle blinker logic
void handleBlinkers(void *param) {
  const int blinkInterval = 500;  // Blinker on/off interval in milliseconds
  TickType_t xLastWakeTime = xTaskGetTickCount();

  while (true) {
    // Handle Left Blinker
    if (leftFlash) {
      digitalWrite(leftLedPin, !digitalRead(leftLedPin));  // Toggle LED

      if (digitalRead(leftLedPin) == HIGH) {
        Serial.println("Left blinker ON");
        // Activate haptic motor when LED turns ON
        if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
          tcaSelect(0);           // Select mux channel 0
          HMD1.Waveform(0, 1);    // Play effect #1
          HMD1.go();              // Trigger the haptic motor
          xSemaphoreGive(i2cMutex);
        } else {
          Serial.println("Failed to take I2C mutex in handleBlinkers (Left)");
        }
      }
    } else {
      digitalWrite(leftLedPin, LOW);  // Ensure LED is OFF
    }

    // Handle Right Blinker
    if (rightFlash) {
      digitalWrite(rightLedPin, !digitalRead(rightLedPin));  // Toggle LED

      if (digitalRead(rightLedPin) == HIGH) {
        Serial.println("Right blinker ON");
        // Activate haptic motor when LED turns ON
        if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
          tcaSelect(1);           // Select mux channel 1
          HMD2.Waveform(0, 1);    // Play effect #1
          HMD2.go();              // Trigger the haptic motor
          xSemaphoreGive(i2cMutex);
        } else {
          Serial.println("Failed to take I2C mutex in handleBlinkers (Right)");
        }
      }
    } else {
      digitalWrite(rightLedPin, LOW);  // Ensure LED is OFF
    }

    // Wait for the next blink interval
    vTaskDelayUntil(&xLastWakeTime, blinkInterval / portTICK_PERIOD_MS);
  }
}

// FreeRTOS task for handling the headlight and tail light
void handleHeadlightAndTailLight(void *param) {
  while (true) {
    float lux = 0.0;
    // Read the ambient light from the VEML7700 sensor
    if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
      lux = veml.readLux();
      xSemaphoreGive(i2cMutex);
    } else {
      Serial.println("Failed to take I2C mutex in HeadlightTask");
    }

    Serial.print("Ambient Light (lux): ");
    Serial.println(lux);

    // Set a threshold for low light to turn on the headlight and tail light
    if (lux < 140.0 && isHeadlightOn) {
      // Adjust threshold as needed and check Bluetooth override
      digitalWrite(headlightPin, HIGH);   // Turn on headlight
      digitalWrite(taillightPin, HIGH);   // 50% brightness for tail light
      Serial.println("Headlight ON and tail light at 50% brightness");
    } else {
      digitalWrite(headlightPin, LOW);    // Turn off headlight
      digitalWrite(taillightPin, LOW);    // Turn off tail light
      Serial.println("Headlight and tail light OFF");
    }

    vTaskDelay(1000 / portTICK_PERIOD_MS);  // Check every 1 second
  }
}

// Task for collision detection
void handleCollisionDetection(void *param) {
  inv_imu_sensor_event_t imu_event;  // IMU data structure

  while (true) {
    // Get the accelerometer and gyroscope readings
    if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
      IMU.getDataFromRegisters(imu_event);
      xSemaphoreGive(i2cMutex);
    } else {
      Serial.println("Failed to take I2C mutex in CollisionTask");
    }

    // Extract current acceleration values
    float currentAccelX = imu_event.accel[0];
    float currentAccelY = imu_event.accel[1];
    float currentAccelZ = imu_event.accel[2];

    // Calculate the delta for each axis
    float deltaX = abs(currentAccelX - accelX);
    float deltaY = abs(currentAccelY - accelY);
    float deltaZ = abs(currentAccelZ - accelZ);

    // Update previous acceleration values
    accelX = currentAccelX;
    accelY = currentAccelY;
    accelZ = currentAccelZ;

     // Print the current acceleration values and the deltas
    Serial.print("Accel X: "); Serial.print(currentAccelX);
    Serial.print(", Delta X: "); Serial.println(deltaX);
    Serial.print("Accel Y: "); Serial.print(currentAccelY);
    Serial.print(", Delta Y: "); Serial.println(deltaY);
    Serial.print("Accel Z: "); Serial.print(currentAccelZ);
    Serial.print(", Delta Z: "); Serial.println(deltaZ);

    // Check if any delta exceeds the collision threshold
    if (deltaX > collisionThreshold || deltaY > collisionThreshold || deltaZ > collisionThreshold) {
      Serial.println("Collision detected!");
      SerialBT.println("69");
      inCollision = true;
      if (inCollision) {
        // Blink all lights in hazard mode for collision indication
        for (int i = 0; i < 3; i++) {
          digitalWrite(leftLedPin, HIGH);
          digitalWrite(rightLedPin, HIGH);
          digitalWrite(headlightPin, HIGH);
          digitalWrite(taillightPin, HIGH);
          vTaskDelay(300 / portTICK_PERIOD_MS);
          digitalWrite(leftLedPin, LOW);
          digitalWrite(rightLedPin, LOW);
          digitalWrite(headlightPin, LOW);
          digitalWrite(taillightPin, LOW);
          vTaskDelay(300 / portTICK_PERIOD_MS);
        }
      }
    } else if (deltaX > decelThreshold || deltaY > decelThreshold) {
      Serial.println("Slow down detected!");
      // Blink brake light
      for (int i = 0; i < 3; i++) {
        digitalWrite(taillightPin, HIGH);
        vTaskDelay(200 / portTICK_PERIOD_MS);
        digitalWrite(taillightPin, LOW);
        vTaskDelay(200 / portTICK_PERIOD_MS);
      }
    } else {
      inCollision = false;
    }

    vTaskDelay(100 / portTICK_PERIOD_MS);  // Adjust delay as needed
  }
}

void handleBluetooth(void *param) {
  unsigned long lastHeartbeatTime = 0;            // Store the time of the last heartbeat signal
  const unsigned long heartbeatInterval = 5000;   // 5 seconds heartbeat interval

  while (true) {
    // Check if data is available from the Android device
    if (SerialBT.available()) {
      String incomingData = "";

      // Read incoming characters until a newline or return character is detected
      while (SerialBT.available()) {
        char c = SerialBT.read();
        if (c == '\n' || c == '\r')
          break;  // Terminate on newline or carriage return
        incomingData += c;
      }

      // Process the received data
      if (incomingData.length() > 0) {
        Serial.print("Received Data: ");
        Serial.println(incomingData);

        // Toggle the headlight based on the received message
        if (incomingData.equalsIgnoreCase("ON") || incomingData.equalsIgnoreCase("1")) {
          isHeadlightOn = true;
          Serial.println("Headlight turned ON");
        } else if (incomingData.equalsIgnoreCase("OFF") || incomingData.equalsIgnoreCase("2")) {
          isHeadlightOn = false;
          Serial.println("Headlight turned OFF");
        } else {
          Serial.println("Unrecognized command.");
        }
      }
    }

    // Send heartbeat signal every 5 seconds to keep the connection alive
    unsigned long currentTime = millis();
    if (currentTime - lastHeartbeatTime >= heartbeatInterval) {
      SerialBT.println("HB");  // Send "HB" as a heartbeat signal
      lastHeartbeatTime = currentTime;  // Update the last heartbeat time
      Serial.println("Heartbeat sent");
    }

    // Delay to prevent overwhelming the Bluetooth communication
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}
